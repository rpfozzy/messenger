// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub API
const API_KEY = 'API_KEY';
const REPO_OWNER = 'rpfozzy';
const REPO_NAME = 'data3';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ GitHub
async function createFileOnGitHub(filename, content) {
    const url = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${filename}`;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        const existingFile = await fetch(url, {
            headers: {
                'Authorization': `token ${API_KEY}`,
            },
        });
        
        if (existingFile.status === 404) {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            const response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${API_KEY}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: 'Create file',
                    content: btoa(unescape(encodeURIComponent(content))),
                }),
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return response.json();
        } else {
            // –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            const fileData = await existingFile.json();
            const response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${API_KEY}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: 'Update file',
                    content: btoa(unescape(encodeURIComponent(content))),
                    sha: fileData.sha
                }),
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return response.json();
        }
    } catch (error) {
        console.error('Error in createFileOnGitHub:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å GitHub
async function getFileFromGitHub(filename) {
    const url = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${filename}`;
    try {
        const response = await fetch(url, {
            headers: {
                'Authorization': `token ${API_KEY}`,
            },
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        return decodeURIComponent(escape(atob(data.content)));
    } catch (error) {
        console.error('Error in getFileFromGitHub:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function searchUser(query) {
    try {
        const files = await fetch(`https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/`, {
            headers: {'Authorization': `token ${API_KEY}`},
        }).then(res => res.json());

        for (const file of files) {
            if (file.name.endsWith('.txt')) {
                const content = await getFileFromGitHub(file.name);
                if (content.includes(query)) {
                    return content;
                }
            }
        }
        return null;
    } catch (error) {
        console.error('Error in searchUser:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
function showForm(formType) {
    const mainContent = document.getElementById('mainContent');
    mainContent.classList.add('slide-out-right');
    setTimeout(() => {
        mainContent.style.display = 'none';
        if (formType === 'register') {
            document.getElementById('registerForm').classList.add('active', 'slide-in-left');
        } else {
            document.getElementById('loginForm').classList.add('active', 'slide-in-left');
        }
    }, 300);
}

function showButtons() {
    const activeForm = document.querySelector('.form.active');
    activeForm.classList.remove('slide-in-left');
    activeForm.classList.add('slide-out-right');
    setTimeout(() => {
        activeForm.classList.remove('active', 'slide-out-right');
        const mainContent = document.getElementById('mainContent');
        mainContent.style.display = 'block';
        mainContent.classList.remove('slide-out-right');
        mainContent.classList.add('slide-in-left');
    }, 300);
}

function generateRandomNumbers() {
    const phoneInput = document.getElementById('phone');
    phoneInput.classList.add('shake');
    setTimeout(() => {
        const randomNumbers = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
        phoneInput.value = `+68${randomNumbers}`;
        phoneInput.classList.remove('shake');
    }, 500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu() {
    document.body.innerHTML = `
        <div class="main-menu">
            <div class="top-bar">
<button id="settingsBtn" style="float: right;">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
            </div>
            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...">
                <button id="searchBtn">üîç</button>
            </div>
            <div class="content">
                <h1>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</h1>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${localStorage.getItem('username')}!</p>
            </div>
            <div id="searchResult"></div>
            <div id="chatList"></div>
        </div>
    `;

    document.getElementById('settingsBtn').addEventListener('click', showSettings);
    document.getElementById('searchBtn').addEventListener('click', performSearch);
    loadChatList();
    checkForNewMessages();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function showSettings() {
    const settingsMenu = document.createElement('div');
    settingsMenu.className = 'settings-menu';
    settingsMenu.innerHTML = `
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
        <button id="logoutBtn">–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</button>
        <button id="closeSettingsBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    document.body.appendChild(settingsMenu);

    document.getElementById('logoutBtn').addEventListener('click', logout);
    document.getElementById('closeSettingsBtn').addEventListener('click', () => settingsMenu.remove());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
function logout() {
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('username');
    localStorage.removeItem('currentChatId');
    localStorage.removeItem('currentChatPartner');
    location.reload();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
async function performSearch() {
    const query = document.getElementById('searchInput').value;
    try {
        const result = await searchUser(query);
        const searchResultDiv = document.getElementById('searchResult');
        
        if (result) {
            const [, nickname] = result.match(/Nickname: (.+)/);
            const [, username] = result.match(/Username: (.+)/);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            localStorage.setItem('searchNickname', nickname);
            localStorage.setItem('searchUsername', username);

            searchResultDiv.innerHTML = `
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</h3>
                <p>–ù–∏–∫–Ω–µ–π–º: ${nickname}</p>
                <p>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href="#" onclick="openChat('${username}')">@${username}</a></p>
                <button onclick="openChat('${username}')">–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</button>
            `;
        } else {
            searchResultDiv.innerHTML = '<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>';
        }
    } catch (error) {
        console.error('Error in performSearch:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function openUserProfile(username) {
    alert(`–û—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
function openChat(username) {
    const currentUser = localStorage.getItem('username');
    const usersSorted = [currentUser, username].sort();
    const chatId = `@${usersSorted[0]}_@${usersSorted[1]}_messages.txt`;

    const nickname = localStorage.getItem('searchNickname'); // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞

    document.body.innerHTML = `
        <div class="chat-container">
            <div class="chat-header">
<button onclick="showMainMenu()" style="float: right;">–ù–∞–∑–∞–¥</button>
                <h2>${nickname}</h2> <!-- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ -->
            </div>
            <div class="messages-container" id="messagesContainer">
                <div id="messages"></div>
            </div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...">
                <button id="sendButton" onclick="sendMessage('${username}')">
                    <img src="send_icon.png" alt="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">
                </button>
            </div>
        </div>
    `;

    loadMessages(chatId);
    localStorage.setItem('currentChatId', chatId);
    localStorage.setItem('currentChatPartner', username);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(() => checkForNewMessages(), 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadMessages(chatId) {
    try {
        const messages = await getFileFromGitHub(chatId);
        const messagesContainer = document.getElementById('messages');
        const currentUser = localStorage.getItem('username');
        
        if (messagesContainer) {
            messagesContainer.innerHTML = '';

            messages.split('\n').forEach(message => {
                if (message.trim() === '') return;
                const [sender, text] = message.split(': ');
                const messageElement = document.createElement('div');
                messageElement.className = sender === currentUser ? 'message sent' : 'message received';
                messageElement.textContent = text;
                messagesContainer.appendChild(messageElement);
            });

            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(recipient) {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value;
    if (message.trim() === '') return;

    const sender = localStorage.getItem('username');
    const usersSorted = [sender, recipient].sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const chatId = `@${usersSorted[0]}_@${usersSorted[1]}_messages.txt`;
    
    try {
        const newMessage = `${sender}: ${message}\n`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π
        await updateMessageFile(chatId, newMessage);

        messageInput.value = '';
        await loadMessages(chatId);
        updateChatList(sender, recipient);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function checkForNewMessages() {
    const currentUser = localStorage.getItem('username');
    const currentChatId = localStorage.getItem('currentChatId');
    
    try {
        if (currentChatId) {
            const messages = await getFileFromGitHub(currentChatId);
            const messagesContainer = document.getElementById('messages');
            const currentMessages = messagesContainer ? messagesContainer.textContent : '';

            if (messages !== currentMessages) {
                await loadMessages(currentChatId);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function loadChatList() {
    const currentUser = localStorage.getItem('username');
    try {
        const chatListContent = await getFileFromGitHub(`@${currentUser}_chats.txt`);
        const chatList = document.getElementById('chatList');
        chatList.innerHTML = '<h3>–í–∞—à–∏ —á–∞—Ç—ã:</h3>';
        
        chatListContent.split('\n').forEach(chat => {
            if (chat.trim() !== '') {
                const chatElement = document.createElement('p');
                chatElement.innerHTML = `<a href="#" onclick="openChat('${chat}')">–ß–∞—Ç —Å @${chat}</a>`;
                chatList.appendChild(chatElement);
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function updateMessageFile(chatId, newMessage) {
    let existingMessages = '';
    try {
        existingMessages = await getFileFromGitHub(chatId);
    } catch (error) {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    }
    await createFileOnGitHub(chatId, existingMessages + newMessage);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function updateChatList(user, chatPartner) {
    try {
        let chatList = '';
        const chatListFile = `@${user}_chats.txt`;
        try {
            chatList = await getFileFromGitHub(chatListFile);
        } catch (error) {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        }

        if (!chatList.includes(chatPartner)) {
            chatList += `${chatPartner}\n`;
            await createFileOnGitHub(chatListFile, chatList);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
document.getElementById('registerForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const nickname = document.getElementById('nickname').value;
    const username = document.getElementById('username').value.replace('@', '');
    const phone = document.getElementById('phone').value.replace('+', '');
    const password = document.getElementById('password').value;

    const userData = `Nickname: ${nickname}\nUsername: ${username}\nPhone: +${phone}\nPassword: ${password}`;
    
    try {
        await createFileOnGitHub(`${phone}.txt`, userData);
        localStorage.setItem('username', username);
        localStorage.setItem('isLoggedIn', 'true');
        alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        showMainMenu();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
document.getElementById('loginForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const phone = document.getElementById('loginPhone').value.replace('+', '');
    const password = document.getElementById('loginPassword').value;

    try {
        const userData = await getFileFromGitHub(`${phone}.txt`);
        const [, username] = userData.match(/Username: (.+)/);
        const [, storedPassword] = userData.match(/Password: (.+)/);

        if (password === storedPassword) {
            localStorage.setItem('username', username);
            localStorage.setItem('isLoggedIn', 'true');
            alert('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
            showMainMenu();
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function() {
    if (localStorage.getItem('isLoggedIn') === 'true') {
        showMainMenu();
        setInterval(checkForNewMessages, 100);
    }
});  
